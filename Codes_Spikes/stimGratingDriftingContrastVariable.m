function SS = stimGratingDriftingContrastVariable(myScreenInfo, Pars)% One fullscreen grating, drifting or flickering% SS = stimStaticGratings(myScreenInfo, Pars)%% SS = stimStaticGratings(myScreenInfo) uses the default parameters%% 2015-04 SS (based on stimTwoGratings)% 2021-05 EB full screen gratings, less parameters - easier to combine with% auditory%% Basicsif nargin < 1    error('Must at least specify myScreenInfo');endif nargin < 2    Pars = [];end%% The parameters and their definitionpp = cell(1,1);pp{1}  = {'dur',      'Stimulus duration (s *10)',        20,1,600};pp{2}  = {'tf',       'Temporal frequency (Hz *10)',      20,0,4000};pp{3}  = {'sf',       'Spatial frequency (cpd *100)',     12,1,1000};pp{4}  = {'tph',      'Temporal phase (deg)',             0,0,360};pp{5}  = {'sph',      'Spatial phase (deg)',              0,0,360};pp{6}  = {'ori',      'Orientation (deg)',                0,0,360};pp{7} = {'sqwv',     'Square wave (1) or sinusoid (0)',  1,0,1};pp{8} = {'c',        'Contrast (%)',                     100,0,100};pp{9} = {'l',	      'Mean luminance s(%)',    50,0,100};x = XFile('stimGratingDriftingContrastVariable', pp);% x.Write; % call this ONCE: it writtes the .x file%% Parse the parameters[CtrCol(1), CtrRow(1)] = myScreenInfo.Deg2PixCoord(0, 0);  % Center of stimulus (full-screen so always 0)if isempty(Pars)    Pars = x.ParDefaults;enddur         = Pars(1)/10;           % stfreq	 	= Pars(2) /10;          % Hzsfreq  		= Pars(3) /100;         % cpdtempphase  	= Pars(4) * (pi/180);   % radiansspatphase  	= Pars(5) * (pi/180);   % radiansorientation = Pars(6);              % degsqwv        = Pars(7);             % 0 or 1cc 	= Pars(8) /100;          % between 0 and 1mm 	= Pars(9)/100;           % between 0 and 1%% Make the stimulusSS = ScreenStim; % initializationSS.Type = x.Name;SS.Parameters = Pars;SS.nTextures = 1;SS.nFrames = ceil( myScreenInfo.FrameRate*dur );SS.Orientations = repmat(orientation, [1,SS.nFrames]);SS.Amplitudes = ones(1,SS.nFrames)/2; destRects = zeros(4, 1);sourceRects = zeros(4, 1);% it is a large rectanglenx = sqrt(myScreenInfo.Xmax^2+myScreenInfo.Ymax^2)*1.1;% diamIn; % ScreenInfo.Xny = sqrt(myScreenInfo.Xmax^2+myScreenInfo.Ymax^2)*1.1; %diamout screenInfo.Y%% Define Frames and FrameSequence for each component grating    t = 0.001; % threshold% Spatial frequency in cycles/pixelPixPerCycle = myScreenInfo.Deg2Pix(1/sfreq);frequency = 1/PixPerCycle; % sf in cycles/pix%     nx = diff(destRects([1 3], igrat));%     ny = diff(destRects([2 4], igrat));% Make a grid of x and y[xx,yy] = meshgrid(1-nx/2:nx/2,1-ny/2:ny/2);% Image of the spatial phase of the stimulus (in radians)AngFreqs = -2*pi* frequency * xx + spatphase;% a rectangleWindowImage = double(ones(size(xx)));% The temporal phase of the responseif tfreq == 0    nFramesInPeriod = 1;else    nFramesInPeriod = round(myScreenInfo.FrameRate / tfreq);endTemporalPhase = 2*pi*(0:(nFramesInPeriod-1))/nFramesInPeriod + tempphase;ActualFrequency = myScreenInfo.FrameRate/nFramesInPeriod;if tfreq > 0 && abs(ActualFrequency/tfreq-1)>0.1    fprintf(1,'Frequency %d is %2.2f rather than %2.0f Hz\n', ...        igrat, ActualFrequency, tfreq);end% Make moviesshrinkBy = 5;WindowImage = WindowImage(1:shrinkBy:end, 1:shrinkBy:end);% driftingFrames = cell(nFramesInPeriod,1);for iframe = 1:nFramesInPeriod    ContrastImage = sin( AngFreqs + TemporalPhase(iframe));    ContrastImage = sign(ContrastImage).*abs(ContrastImage);    if sqwv        ContrastImage = (ContrastImage>=0)-(ContrastImage<0);    end    ContrastImage = ContrastImage(1:shrinkBy:end,1:shrinkBy:end);    Frames{iframe} = zeros(size(ContrastImage,1), ...        size(ContrastImage,2), 3);    for igun = 1:3        Frames{iframe}(:,:,igun) = uint8(255 * mm * ...            (1 + cc*ContrastImage  .* WindowImage));    endenddestRects(:) = round([CtrCol-nx/2 CtrRow-ny/2 ...    CtrCol+nx/2 CtrRow+ny/2]');% sourceRects(:) = [0 0 nx ny];sourceRects(:) = [0 0 size(ContrastImage,2) size(ContrastImage,1)];SS.DestRects = repmat(destRects, [1 1 SS.nFrames]);SS.SourceRects = repmat(sourceRects, [1 1 SS.nFrames]);SS.MinusOneToOne = false;% the frame sequenceFrameSequence = mod(1:SS.nFrames,nFramesInPeriod);FrameSequence(FrameSequence == 0) = nFramesInPeriod;SS.nImages = nFramesInPeriod;ImageTextures = Frames;SS.BackgroundColor = round(255 * mm);SS.BackgroundPersists = true;SS.ImageSequence = FrameSequence;% SS.BilinearFiltering = 0; % do not interpolate! %% put the images in video RAMSS = SS.LoadImageTextures( myScreenInfo, ImageTextures );return%% to test the functionRigInfo = RigInfoGet; %#ok<UNRCH>myScreenInfo = ScreenInfo(RigInfo);myScreenInfo = myScreenInfo.CalibrationLoad;SS = stimGratingDriftingContrastVariable(myScreenInfo);show(SS, myScreenInfo);Screen('CloseAll');% Play(SS, myScreenInfo)